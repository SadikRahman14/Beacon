@model IEnumerable<Beacon.Models.Complain>
@{
    ViewData["Title"] = "All Complaints";
}

<section class="alerts-section">
    <div class="alerts-container">
        <header class="alerts-header">
            <h2 class="alerts-title">All Complaints</h2>
            <p class="alerts-subtitle">Browse all submitted complaints from the community</p>
        </header>

        @if (!(Model?.Any() ?? false))
        {
            <div class="alerts-empty">No complaints found.</div>
        }
        else
        {
            <div class="alerts-grid">
                @foreach (var complain in Model.OrderByDescending(c => c.CreatedAt))
                {
                    <article class="alert-card" data-complain-id="@complain.ComplaintId">
                        <!-- Meta: Date + Type -->
                        <div class="meta-row">
                            <time class="meta-date">@complain.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy hh:mm tt")</time>
                            <span class="alert-type badge-default">@complain.Type</span>
                        </div>

                        <!-- User Name + Profile Image -->
                        <div class="meta-row" style="align-items:center; margin-top:6px;">
                            <img src="@(complain.User?.ProfileImageUrl ?? "/images/default-profile.jpg")" 
                                 alt="User Image" style="width:32px;height:32px;border-radius:50%;object-fit:cover;margin-right:8px;" />
                            <a asp-controller="Account" asp-action="OthersProfile" asp-route-id="@complain.UserId" 
                               style="color:var(--h-text); font-weight:600; text-decoration:none;">
                                @(complain.User != null ? $"{complain.User.FirstName} {complain.User.LastName}" : "Unknown User")
                            </a>
                        </div>

                        <!-- Location -->
                        <h3 class="alert-heading">@(!string.IsNullOrWhiteSpace(complain.Location) ? complain.Location : "Location Unknown")</h3>

                        <!-- Content -->
                        <p class="alert-content clamp-3">@complain.Content</p>

                        <!-- Images -->
                        @if (!string.IsNullOrEmpty(complain.ComplaintImageUrl))
                        {
                            var images = complain.ComplaintImageUrl.Split(',');
                            <div class="alert-thumb" style="margin-top:12px; display:flex; gap:8px; flex-wrap:wrap;">
                                @foreach (var img in images)
                                {
                                    <img src="@img" alt="Complaint Image" style="width:200px;height:150px;object-fit:cover;border-radius:12px;cursor:pointer;" onclick="openImage(this)" />
                                }
                            </div>
                        }

                       <!-- Actions -->
                        <div class="card-actions">
                            <div class="vote-bar">
                                <button type="button" class="vote-btn vote-up" aria-label="Upvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 5l7 7H5l7-7z" /></svg>
                                    <span class="count up-count">0</span>
                                </button>
                                <button type="button" class="vote-btn vote-down" aria-label="Downvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 19l-7-7h14l-7 7z" /></svg>
                                    <span class="count down-count">0</span>
                                </button>
                            </div>
                    </article>
                    <hr class="alert-divider" />
                }
            </div>
        }
    </div>
</section>

<!-- Lightbox Modal -->
<div id="lightbox" onclick="closeImage()" style="display:none;">
    <img id="lightbox-img" src="" alt="Full Image" />
</div>

@section Scripts {
<script>
function openImage(img) {
    var lightbox = document.getElementById('lightbox');
    var lbImg = document.getElementById('lightbox-img');
    lbImg.src = img.src;
    lightbox.style.display = 'flex';
}
function closeImage() {
    var lightbox = document.getElementById('lightbox');
    lightbox.style.display = 'none';
}

// Optional: Vote button click (example)
document.querySelectorAll('.vote-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
        const complainId = btn.getAttribute('data-complain-id');
        const formData = new FormData();
        formData.append('value', '1'); // example for upvote

        const tokenEl = document.querySelector('meta[name="request-verification-token"]');
        const token = tokenEl ? tokenEl.getAttribute('content') : '';

        const res = await fetch(`/complains/${encodeURIComponent(complainId)}/vote`, {
            method: 'POST',
            body: formData,
            headers: token ? { 'RequestVerificationToken': token } : {}
        });

        if (res.ok) {
            const data = await res.json();
            btn.querySelector('.count').textContent = data.voteCount || 0;
        }
    });
});
</script>
}

<style>
/* Paste the CSS from your index.cshtml here so it matches exactly */
</style>


<style>
/* ===== Copy CSS from Index.cshtml ===== */
:root {
    --bg: #0f172a;
    --card: #111827;
    --border: #1f2937;
    --text: #e5e7eb;
    --muted: #94a3b8;
    --accent: #4f46e5;
    --btn-text: #ffffff;
    --h-text: #ffffff;
    --thumb-border: #1f2937;
}
.light {
    --bg: #f8fafc;
    --card: #ffffff;
    --border: #e5e7eb;
    --text: #0f172a;
    --muted: #475569;
    --accent: #4f46e5;
    --btn-text: #ffffff;
    --h-text: #0f172a;
}
body { background: var(--bg); color: var(--text); font-family: 'Segoe UI', sans-serif; transition: background .25s ease, color .25s ease; }

.alerts-section { padding: 64px 0; color: var(--text); }
.alerts-container { max-width: 1120px; margin: 0 auto; padding: 0 24px; }
.alerts-header { margin: 0 0 28px 0; }
.alerts-title { margin:0; font-size: clamp(28px, 3vw, 44px); font-weight:700; line-height:1.15; color:var(--h-text); }
.alerts-subtitle { margin-top:8px; color:var(--muted); }
.alerts-empty { margin: 24px auto 0; max-width: 680px; text-align:center; padding:24px; border:1px solid var(--border); border-radius:12px; background:var(--card); color:var(--muted); }
.alerts-grid { margin-top:32px; display:grid; grid-template-columns:1fr; gap:32px; border-top:1px solid var(--border); padding-top:32px; justify-content:center; }

.alert-card { display:flex; flex-direction:column; gap:14px; max-width:640px; background: var(--card); padding: 20px; border-radius:12px; border:1px solid var(--border); box-shadow:0 8px 25px rgba(0,0,0,0.12); }
.alert-card:hover { transform: translateY(-2px); transition: transform 0.2s ease; }

.meta-row { display:flex; align-items:center; gap:12px; font-size:12px; }
.meta-date { color: var(--muted); }
.alert-type { display:inline-block; padding:6px 10px; border-radius:999px; font-weight:700; font-size:12px; background:#4f46e5; color:#fff; }

.alert-heading { margin:6px 0 0 0; font-size:18px; font-weight:800; color:var(--h-text); }
.alert-heading a { color:inherit; text-decoration:none; }
.alert-heading a:hover { opacity:0.9; }

.alert-content { margin:6px 0 0 0; font-size:14px; color:var(--muted); }
.clamp-3 { display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden; }

.alert-thumb { margin-top:12px; overflow:hidden; border:1px solid var(--thumb-border); border-radius:14px; width:100%; display:flex; flex-wrap:wrap; gap:6px; }
.alert-thumb img { width:100%; height:260px; object-fit:cover; display:block; border-radius:8px; }

.card-actions { margin-top:12px; padding-top:12px; border-top:1px solid var(--border); display:flex; align-items:center; justify-content:space-between; gap:12px; }
.vote-bar {
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .vote-btn {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        cursor: pointer;
        user-select: none;
        padding: 8px 10px;
        border-radius: 10px;
        border: 1px solid var(--border);
        background: var(--card);
        color: var(--h-text);
        transition: box-shadow .15s ease, background .15s ease, transform .05s ease;
    }

        .vote-btn:hover {
            background: rgba(255,255,255,.04);
        }

        .vote-btn:active {
            transform: translateY(1px);
        }

        .vote-btn.active.up {
            box-shadow: 0 0 0 2px rgba(16,185,129,.5);
        }

        .vote-btn.active.down {
            box-shadow: 0 0 0 2px rgba(244,63,94,.5);
        }

        .vote-btn .icon {
            width: 16px;
            height: 16px;
            fill: currentColor;
            opacity: .9;
        }

        .vote-btn .count {
            font-weight: 700;
            font-size: 13px;
            color: var(--h-text);
        }


#lightbox { position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.8); display:flex; justify-content:center; align-items:center; z-index:1000; cursor: zoom-out; }
#lightbox img { max-width: 90%; max-height: 90%; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.5); }
</style>
