@model IEnumerable<Beacon.Models.AlertComment>
@{
    var alertId = (string)ViewBag.AlertId;
    var isSignedIn = User?.Identity?.IsAuthenticated ?? false;
    var count = Model?.Count() ?? 0;
}

<style>
    /* ===== Dark mode friendly comment styles ===== */
    :root {
        --c-primary: #1193d4;
        --c-bg-dark: #1e293b;
        --c-card-dark: #0f172a;
        --c-text-light: #f8fafc;
        --c-text-muted: #94a3b8;
        --c-danger: #dc2626;
        --radius: 10px;
    }

    .comments-card {
        background: var(--c-card-dark);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: var(--radius);
        padding: 20px;
        color: var(--c-text-light);
    }

    .comments-head {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 14px;
    }

    .comments-title {
        font-size: 1.25rem;
        font-weight: 700;
    }

    .comments-count {
        font-size: .9rem;
        color: var(--c-primary);
        background: rgba(17,147,212,.15);
        padding: 3px 10px;
        border-radius: 999px;
        font-weight: 600;
    }

    /* form */
    .comment-form {
        margin-bottom: 14px;
    }

    .comment-textarea {
        width: 100%;
        min-height: 90px;
        border: 1px solid rgba(255,255,255,.15);
        background: var(--c-bg-dark);
        border-radius: var(--radius);
        padding: 12px;
        color: var(--c-text-light);
        font-size: .95rem;
    }

        .comment-textarea:focus {
            border-color: var(--c-primary);
            outline: none;
            box-shadow: 0 0 0 2px rgba(17,147,212,.4);
        }

    .comment-submit {
        margin-top: 8px;
        background: var(--c-primary);
        color: #fff;
        border: 0;
        padding: 8px 16px;
        border-radius: var(--radius);
        font-weight: 600;
        cursor: pointer;
        transition: background .15s;
    }

        .comment-submit:hover {
            background: #0e7cb5;
        }

    .comment-helper {
        margin-top: 6px;
        font-size: .8rem;
        color: var(--c-text-muted);
    }

    /* list */
    .comment-item {
        display: flex;
        gap: 12px;
        padding: 14px 0;
        border-top: 1px solid rgba(255,255,255,.07);
    }

        .comment-item:first-child {
            border-top: 0;
        }

    .comment-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .comment-body {
        flex: 1;
    }

    .comment-row1 {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .comment-author {
        font-weight: 600;
    }

    .comment-time {
        font-size: .8rem;
        color: var(--c-text-muted);
    }

    .comment-content {
        margin-top: 4px;
        line-height: 1.4;
    }

    .comment-actions {
        margin-top: 6px;
    }

    .btn-link-danger {
        background: transparent;
        border: 1px solid rgba(220,38,38,.4);
        color: var(--c-danger);
        padding: 3px 10px;
        font-size: .8rem;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-link-danger:hover {
            background: rgba(220,38,38,.1);
        }

    .comments-empty {
        padding: 12px 0;
        color: var(--c-text-muted);
    }
</style>

<div class="comments-card">
    <div class="comments-head">
        <div class="comments-title">Comments</div>
        <div class="comments-count"><span id="commentCount">@count</span></div>
    </div>

    @if (isSignedIn)
    {
        <form id="commentForm" class="comment-form" asp-controller="AlertComments" asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" name="alertId" value="@alertId" />
            <textarea name="content" class="comment-textarea" rows="3" maxlength="1500"
                  placeholder="Add a comment..."></textarea>
            <button class="comment-submit" type="submit">Post</button>
            <div class="comment-helper">
                <span>Be respectful. Max 1500 characters.</span>
                <span id="charLeft">1500 left</span>
            </div>
        </form>
    }
    else
    {
        <div class="comment-form" style="margin-bottom:0">
            <div class="comment-helper" style="margin-top:0">
                Please <a asp-controller="Account" asp-action="Login" style="color:var(--c-primary); font-weight:600;">log in</a> to comment.
            </div>
        </div>
    }

    <div id="commentsList" class="comments-list">
        @await Html.PartialAsync("~/Views/Shared/Components/AlertComments/_CommentsList.cshtml", Model)
    </div>
</div>

@section Scripts {
    <script>
        (function () {
          const form = document.getElementById('commentForm');
          const textarea = form?.querySelector('.comment-textarea');
          const charLeft = document.getElementById('charLeft');
          const maxLen = 1500;

          if (textarea && charLeft) {
            textarea.addEventListener('input', () => {
              const left = Math.max(0, maxLen - textarea.value.length);
              charLeft.textContent = left + ' left';
            });
          }

          if (form) {
            form.addEventListener('submit', async function (e) {
              e.preventDefault();
              const fd = new FormData(form);
              const resp = await fetch(form.action, {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                body: fd
              });
              if (!resp.ok) { alert('Failed to post comment.'); return; }
              const html = await resp.text();
              document.getElementById('commentsList').innerHTML = html;
              // update count from data-count on the returned list
              const inner = document.getElementById('commentsListInner');
              const count = inner?.getAttribute('data-count');
              if (count) document.getElementById('commentCount').textContent = count;
              form.reset();
              if (charLeft) charLeft.textContent = maxLen + ' left';
            });
          }

          document.getElementById('commentsList')?.addEventListener('click', async function (e) {
            const btn = e.target.closest('[data-delete-id]');
            if (!btn) return;
            if (!confirm('Delete this comment?')) return;

            const id = btn.getAttribute('data-delete-id');
            const token = document.querySelector('#commentForm input[name="__RequestVerificationToken"]')?.value;
            const resp = await fetch(`/AlertComments/Delete/${id}`, {
              method: 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': token
              },
              body: new URLSearchParams({})
            });
            if (!resp.ok) { alert('Failed to delete.'); return; }
            const html = await resp.text();
            document.getElementById('commentsList').innerHTML = html;
            const inner = document.getElementById('commentsListInner');
            const count = inner?.getAttribute('data-count');
            if (count) document.getElementById('commentCount').textContent = count;
          });
        })();
    </script>
}
