@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var tokens = Antiforgery.GetAndStoreTokens(Context);
}
<meta name="request-verification-token" content="@tokens.RequestToken" />

@using System.Linq
@model IEnumerable<Beacon.Models.DevUpdate>
@{
    ViewData["Title"] = "Dev Updates";

    string PrettyDate(DateTime dt) => dt.ToLocalTime().ToString("MMM dd, yyyy");
    string TypeClass(string? t) => (t ?? "").ToLower() switch
    {
        "bug" or "bugfix" or "fix" => "badge-emergency",
        "release" => "badge-event",
        "deploy" or "deployment" => "badge-announce",
        "maintenance" => "badge-safety",
        _ => "badge-default"
    };
}

<section class="alerts-section">
    <div class="alerts-container">
        <header class="alerts-header">
            <h2 class="alerts-title">Dev updates</h2>
            <p class="alerts-subtitle"> See the next plan of your city.</p>
        </header>

        @if (!(Model?.Any() ?? false))
        {
            <div class="alerts-empty">No dev updates available.</div>
        }
        else
        {
            <div class="alerts-grid">
                @foreach (var item in Model.OrderByDescending(a => a.CreatedAt))
                {
                    <article class="alert-card" data-update-id="@item.DevUpdateId">
                        <!-- Meta -->
                        <div class="meta-row">
                            <time class="meta-date">@PrettyDate(item.CreatedAt)</time>
                            <span class="alert-type @TypeClass(item.Type)">@item.Type</span>
                        </div>

                        <!-- Title (Location behaves like the “heading” from your original card) -->
                        <h3 class="alert-heading">
                            <a asp-action="Details" asp-route-id="@item.DevUpdateId">
                                @(!string.IsNullOrWhiteSpace(item.Location) ? item.Location : "Update")
                            </a>
                        </h3>

                        <!-- Content (clamped to 3 lines like the reference) -->
                        <p class="alert-content clamp-3">@item.Content</p>

                        @* Optional thumbnail if present *@
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <div class="alert-thumb">
                                <img src="@item.ImageUrl" alt="Update image">
                            </div>
                        }

                        <!-- Actions -->
                        <div class="card-actions">
                            <div class="vote-bar">
                                <button type="button" class="vote-btn vote-up" aria-label="Upvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 5l7 7H5l7-7z" /></svg>
                                    <span class="count up-count">0</span>
                                </button>
                                <button type="button" class="vote-btn vote-down" aria-label="Downvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 19l-7-7h14l-7 7z" /></svg>
                                    <span class="count down-count">0</span>
                                </button>
                            </div>

                            <div class="row-actions">
                                <a asp-action="Details" asp-route-id="@item.DevUpdateId" class="btn btn-hollow">
                                    See details
                                </a>

                                @* (Optional) Admin edit/delete controls; safe addition *@
                                @if (User.IsInRole("admin"))
                                {
                                    <a asp-action="Edit" asp-route-id="@item.DevUpdateId" class="btn btn-primary">
                                        Edit
                                    </a>

                                    <form asp-action="Delete"
                                          asp-route-id="@item.DevUpdateId"
                                          method="post"
                                          class="inline-form"
                                          onsubmit="return confirm('Delete this update permanently?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger">Delete</button>
                                    </form>
                                }
                            </div>
                        </div>
                    </article>

                    <hr class="alert-divider" />
                }
            </div>
        }

        @if (User.IsInRole("admin"))
        {
            <div class="actions-row">
                <a asp-action="Create" class="btn btn-primary">
                    <span class="btn-icon">＋</span> New Update
                </a>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        (function(){
          function anti() {
            const el = document.querySelector('meta[name="request-verification-token"]');
            return el ? el.getAttribute('content') : '';
          }

          const cards = Array.from(document.querySelectorAll('[data-dev-id]'));
          if (cards.length === 0) return;

          const ids = cards.map(c => c.getAttribute('data-dev-id')).filter(Boolean);
          const idParam = encodeURIComponent(ids.join(','));

          // Hydrate counts & user state
          fetch(`/devupdates/votes?ids=${idParam}`, { headers: { 'X-Requested-With': 'XMLHttpRequest' }})
            .then(r => r.json())
            .then(map => {
              cards.forEach(card => {
                const id = card.getAttribute('data-dev-id');
                const upBtn = card.querySelector('.vote-up');
                const downBtn = card.querySelector('.vote-down');
                const upC = card.querySelector('.up-count');
                const downC = card.querySelector('.down-count');

                const stat = map[id] || { upvotes: 0, downvotes: 0, userVote: 0 };
                if (upC) upC.textContent = String(stat.upvotes || 0);
                if (downC) downC.textContent = String(stat.downvotes || 0);

                upBtn?.classList.toggle('active', stat.userVote === 1);
                upBtn?.classList.toggle('up',     stat.userVote === 1);
                downBtn?.classList.toggle('active', stat.userVote === -1);
                downBtn?.classList.toggle('down',   stat.userVote === -1);
              });
            })
            .catch(console.error);

          // Click handlers
          cards.forEach(card => {
            const id = card.getAttribute('data-dev-id');
            const upBtn = card.querySelector('.vote-up');
            const downBtn = card.querySelector('.vote-down');
            const upC = card.querySelector('.up-count');
            const downC = card.querySelector('.down-count');

            async function sendVote(value) {
              upBtn?.setAttribute('disabled','true');
              downBtn?.setAttribute('disabled','true');
              try {
                const fd = new FormData();
                fd.append('value', String(value));
                const resp = await fetch(`/devupdates/${encodeURIComponent(id)}/vote`, {
                  method: 'POST',
                  headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': anti()
                  },
                  body: fd
                });
                if (resp.status === 401) { window.location.href = '/Account/Login'; return; }
                if (!resp.ok) { console.error('Vote failed', await resp.text()); return; }
                const data = await resp.json();
                if (upC) upC.textContent = String(data.upvotes || 0);
                if (downC) downC.textContent = String(data.downvotes || 0);

                const uv = data.userVote || 0;
                upBtn?.classList.toggle('active', uv === 1);
                upBtn?.classList.toggle('up',     uv === 1);
                downBtn?.classList.toggle('active', uv === -1);
                downBtn?.classList.toggle('down',   uv === -1);
              } finally {
                upBtn?.removeAttribute('disabled');
                downBtn?.removeAttribute('disabled');
              }
            }

            upBtn?.addEventListener('click', () => sendVote(1).catch(console.error));
            downBtn?.addEventListener('click', () => sendVote(-1).catch(console.error));
          });
        })();
    </script>
}

<style>
    /* ===== Theme (CSS variables) ===== */
    :root {
        --bg: #0f172a;
        --card: #111827;
        --border: #1f2937;
        --text: #e5e7eb;
        --muted: #94a3b8;
        --accent: #4f46e5;
        --btn-text: #ffffff;
        --h-text: #ffffff;
        --thumb-border: #1f2937;
        --danger: #dc2626;
        --danger-hover: #b91c1c;
    }

    .light {
        --bg: #f8fafc;
        --card: #ffffff;
        --border: #e5e7eb;
        --text: #0f172a;
        --muted: #475569;
        --accent: #4f46e5;
        --btn-text: #ffffff;
        --h-text: #0f172a;
        --thumb-border: #e5e7eb;
        --danger: #dc2626;
        --danger-hover: #b91c1c;
    }

    /* ===== Section / Container ===== */
    .alerts-section {
        padding: 64px 0;
        color: var(--text);
    }

    .alerts-container {
        max-width: 1120px;
        margin: 0 auto;
        padding: 0 24px;
    }

    .alerts-header {
        margin: 0 0 28px 0;
    }

    .alerts-title {
        margin: 0;
        font-size: clamp(28px, 3vw, 44px);
        font-weight: 700;
        line-height: 1.15;
        color: var(--h-text);
    }

    .alerts-subtitle {
        margin-top: 8px;
        color: var(--muted);
    }

    .alert-divider {
        border: none;
        border-top: 2px dashed #6c63ff;
        margin: 32px auto;
        width: 80%;
    }

    .alerts-empty {
        margin: 24px auto 0;
        max-width: 680px;
        text-align: center;
        padding: 24px;
        border: 1px solid var(--border);
        border-radius: 12px;
        background: var(--card);
        color: var(--muted);
    }

    /* ===== Grid ===== */
    .alerts-grid {
        margin-top: 32px;
        display: grid;
        grid-template-columns: 1fr;
        gap: 32px;
        border-top: 1px solid var(--border);
        padding-top: 32px;
        justify-content: center;
    }

    /* ===== Card ===== */
    .alert-card {
        display: flex;
        flex-direction: column;
        gap: 14px;
        max-width: 640px;
    }

    .meta-row {
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 12px;
    }

    .meta-date {
        color: var(--muted);
    }

    .alert-type {
        display: inline-block;
        padding: 6px 10px;
        border-radius: 999px;
        font-weight: 700;
        font-size: 12px;
        user-select: none;
    }

    /* Badges */
    .badge-emergency {
        background: #7f1d1d;
        color: #fecaca;
    }

    .badge-safety {
        background: #064e3b;
        color: #a7f3d0;
    }

    .badge-event {
        background: #1e3a8a;
        color: #bfdbfe;
    }

    .badge-announce {
        background: #3b0764;
        color: #ddd6fe;
    }

    .badge-default {
        background: #1f2937;
        color: #e5e7eb;
    }

    .alert-heading {
        margin: 6px 0 0 0;
        font-size: 18px;
        font-weight: 800;
        color: var(--h-text);
    }

        .alert-heading a {
            color: inherit;
            text-decoration: none;
        }

            .alert-heading a:hover {
                opacity: .9;
            }

    .alert-content {
        margin: 6px 0 0 0;
        font-size: 14px;
        color: var(--muted);
    }

    .clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Thumbnail */
    .alert-thumb {
        margin-top: 12px;
        overflow: hidden;
        border: 1px solid var(--thumb-border);
        border-radius: 14px;
        width: 100%;
    }

        .alert-thumb img {
            width: 100%;
            height: 260px;
            object-fit: cover;
            display: block;
        }

    /* ===== Actions ===== */
    .card-actions {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid var(--border);
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
    }

    .vote-bar {
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .vote-btn {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        cursor: pointer;
        user-select: none;
        padding: 8px 10px;
        border-radius: 10px;
        border: 1px solid var(--border);
        background: var(--card);
        color: var(--h-text);
        transition: box-shadow .15s ease, background .15s ease, transform .05s ease;
    }

        .vote-btn:hover {
            background: rgba(255,255,255,.04);
        }

        .vote-btn:active {
            transform: translateY(1px);
        }

        .vote-btn.active.up {
            box-shadow: 0 0 0 2px rgba(16,185,129,.5);
        }

        .vote-btn.active.down {
            box-shadow: 0 0 0 2px rgba(244,63,94,.5);
        }

        .vote-btn .icon {
            width: 16px;
            height: 16px;
            fill: currentColor;
            opacity: .9;
        }

        .vote-btn .count {
            font-weight: 700;
            font-size: 13px;
            color: var(--h-text);
        }

    .row-actions {
        display: inline-flex;
        gap: 8px;
        align-items: center;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        border: none;
        border-radius: 10px;
        padding: 10px 14px;
        font-weight: 800;
        font-size: 14px;
        cursor: pointer;
        text-decoration: none;
        transition: transform .05s ease, box-shadow .15s ease, background .15s ease, color .15s ease;
    }

        .btn:active {
            transform: translateY(1px);
        }

    .btn-primary {
        background: var(--accent);
        color: var(--btn-text);
        box-shadow: 0 6px 16px rgba(79,70,229,.25);
    }

        .btn-primary:hover {
            background: #4338ca;
            box-shadow: 0 8px 18px rgba(79,70,229,.35);
        }

    .btn-hollow {
        background: transparent;
        color: var(--h-text);
        border: 1px solid var(--border);
    }

        .btn-hollow:hover {
            background: rgba(255,255,255,.06);
        }

    .btn-danger {
        background: var(--danger);
        color: #fff;
    }

        .btn-danger:hover {
            background: var(--danger-hover);
        }

    .inline-form {
        display: inline;
    }

    .actions-row {
        margin-top: 28px;
        display: flex;
        justify-content: flex-end;
    }
</style>
