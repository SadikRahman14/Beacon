@model IEnumerable<Beacon.Models.AlertPost>
@{
    ViewData["Title"] = "Alert Posts";

    string PrettyDate(DateTime? dt) => (dt ?? DateTime.UtcNow).ToString("MMM dd, yyyy");
    string TypeClass(string? t) => (t ?? "").ToLower() switch
    {
        "emergency" => "badge-emergency",
        "safety" => "badge-safety",
        "event" => "badge-event",
        "announcement" => "badge-announce",
        "weather" => "badge-weather",
        _ => "badge-default"
    };
}

<section class="alerts-section">
    <div class="alerts-container">
        <header class="alerts-header">
            <h2 class="alerts-title">Latest alerts</h2>
            <p class="alerts-subtitle">Stay informed about emergencies, safety notices, events and more.</p>
        </header>

        @if (!Model.Any())
        {
            <div class="alerts-empty">No alerts available.</div>
        }
        else
        {
            <div class="alerts-grid">
                @foreach (var alert in Model.OrderByDescending(a => a.CreatedAt))
                {
                    <article class="alert-card" data-alert-id="@alert.AlertId">
                        <!-- Meta row -->
                        <div class="meta-row">
                            <time class="meta-date">@PrettyDate(alert.CreatedAt)</time>
                            <span class="alert-type @TypeClass(alert.Type)">@alert.Type</span>
                        </div>

                        <!-- Title -->
                        <h3 class="alert-heading">
                            <a asp-action="Details" asp-route-id="@alert.AlertId">
                                @(!string.IsNullOrWhiteSpace(alert.Location) ? alert.Location : "Alert")
                            </a>
                        </h3>

                        <p class="alert-content clamp-3">@alert.Content</p>

                        <div class="poster">
                            <div class="avatar">
                                @{
                                    var name = alert.Admin?.Email ?? "User";
                                    var initial = char.ToUpperInvariant(name.FirstOrDefault('U'));
                                }
                                <span>@initial</span>
                            </div>
                            <div class="poster-info">
                                <div class="poster-name">@((alert.Admin?.Email) ?? "Unknown")</div>
                                <div class="poster-label">Posted</div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(alert.AlertImageUrl))
                        {
                            <div class="alert-thumb">
                                <img src="@alert.AlertImageUrl" alt="Alert image">
                            </div>
                        }

                        <!-- Actions -->
                        <div class="card-actions">
                            <div class="vote-bar">
                                <button type="button" class="vote-btn vote-up" aria-label="Upvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 5l7 7H5l7-7z" /></svg>
                                    <span class="count up-count">0</span>
                                </button>
                                <button type="button" class="vote-btn vote-down" aria-label="Downvote">
                                    <svg viewBox="0 0 24 24" class="icon"><path d="M12 19l-7-7h14l-7 7z" /></svg>
                                    <span class="count down-count">0</span>
                                </button>
                            </div>

                            <div class="row-actions">
                                <a asp-action="Details" asp-route-id="@alert.AlertId" class="btn btn-hollow">
                                    See details
                                </a>
                                @if (User.IsInRole("admin"))
                                {
                                    <a asp-action="Edit" asp-route-id="@alert.AlertId" class="btn btn-primary">
                                        Edit
                                    </a>
                                }

                                @* Admin-only delete *@
                                @if (User?.Identity?.IsAuthenticated == true && User.IsInRole("admin"))
                                {
                                    <form asp-action="Delete"
                                          asp-route-id="@alert.AlertId"
                                          method="post"
                                          class="inline-form"
                                          onsubmit="return confirm('Delete this alert permanently?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger">Delete</button>
                                    </form>
                                }
                            </div>
                        </div>
                    </article>

                    // <hr class="alert-divider" />
                }
            </div>
        }

        @if (User.IsInRole("admin"))
        {
            <div class="actions-row">
                <a asp-action="Create" class="btn btn-primary">
                    <span class="btn-icon">＋</span> Add Alert
                </a>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        (function(){
          // Vote buttons (UI only)
          document.querySelectorAll('[data-alert-id]').forEach(card => {
            const up = card.querySelector('.vote-up');
            const down = card.querySelector('.vote-down');
            const upC = card.querySelector('.up-count');
            const downC = card.querySelector('.down-count');

            up?.addEventListener('click', () => {
                      up.classList.add('active-like');
        down.classList.remove('active-dislike');

              upC.textContent = String((parseInt(upC.textContent || '0',10) + 1));
            });

            down?.addEventListener('click', () => {
                      down.classList.add('active-dislike');
        up.classList.remove('active-like');

              downC.textContent = String((parseInt(downC.textContent || '0',10) + 1));
            });
          });
        })();
    </script>
}

<style>
    :root {
        --bg1: #f2f6fb;
        --card-bg: #ffffff;
        --muted: #6b7280;
        --accent-blue: #3b82f6;
        --accent-orange: #f59e0b;
        --glass: rgba(255,255,255,0.7);
    }

    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        font-family: "Poppins", "Segoe UI", Roboto, Arial, sans-serif;
        background: linear-gradient(180deg, #eef6ff 0%, #fbf7f2 100%);
        color: #111827;
    }

    /* Section Container */
    .alerts-section {
        width: 92%;
        max-width: 1220px;
        margin: 0 auto;
        padding: 32px 0;
    }

    /* Header */
    .alerts-header {
        background: linear-gradient(90deg, #363675 46%, #5C5C73 100%, #942121 0%);
        color: #fff;
        padding: 54px 0 46px;
        border-bottom-left-radius: 12px;
        border-bottom-right-radius: 12px;
        box-shadow: 0 12px 40px rgba(59,130,246,0.08);
        text-align: center;
    }

    .alerts-title {
        font-size: 44px;
        margin: 6px 0 8px;
        font-weight: 700;
        letter-spacing: -0.6px;
    }

    .alerts-subtitle {
        margin: 0 auto;
        max-width: 900px;
        opacity: 0.95;
        font-size: 16px;
    }

    /* Grid layout */
    .alerts-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 22px;
        margin: 28px 0 56px;
    }

    /* Alert Card */
    .alert-card {
        background: linear-gradient(180deg, #ffffff, #fbfbfd);
        border-radius: 14px;
        padding: 18px;
        box-shadow: 0 8px 28px rgba(2,6,23,0.05);
        border: 1px solid rgba(15,23,42,0.03);
        transition: transform .28s cubic-bezier(.2,.9,.2,1), box-shadow .28s;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }


        .alert-card.show {
            opacity: 1;
            transform: translateY(0) scale(1);
        }

        .alert-card:hover {
            transform: translateY(-6px) scale(1.01);
            box-shadow: 0 20px 50px rgba(2,6,23,0.09);
        }

    /* Meta Row */
    .meta-row {
        display: flex;
        justify-content: space-between;
        font-size: 13px;
        color: var(--muted);
        margin-bottom: 8px;
    }

    .alert-type {
        padding: 6px 10px;
        border-radius: 999px;
        font-weight: 700;
        font-size: 12px;
    }

    /* Badges for types */
    .badge-emergency {
        background: #fee2e2;
        color: #991b1b;
    }

    .badge-safety {
        background: #dcfce7;
        color: #166534;
    }

    .badge-event {
        background: #dbeafe;
        color: #1e40af;
    }

    .badge-announce {
        background: #fef3c7;
        color: #92400e;
    }

    .badge-weather {
        background: #e0f2fe;
        color: #075985;
    }

    .badge-default {
        background: #f3f4f6;
        color: #374151;
    }

    /* Title + content */
    .alert-heading {
        font-size: 18.5px;
        font-weight: 700;
        margin: 0 0 6px;
    }

        .alert-heading a {
            text-decoration: none;
            color: #111827;
        }

    .alert-content {
        color: #374151;
        margin: 12px 0 14px;
        line-height: 1.5;
        font-size: 15px;
    }

    /* Poster row */
    .poster {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-top: 10px;
    }

    .avatar {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        background: var(--accent-blue);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        font-weight: 700;
        font-size: 18px;
    }

    .poster-info {
        display: flex;
        flex-direction: column;
        font-size: 13px;
    }

    .poster-name {
        font-weight: 600;
        color: #111827;
    }

    .poster-label {
        color: var(--muted);
        font-size: 12px;
    }

    /* Thumbnail */
    .alert-thumb {
        margin-top: 12px;
    }

        .alert-thumb img {
            width: 100%;
            border-radius: 10px;
        }

    /* Actions */
    .card-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 14px;
        border-top: 1px solid #f3f4f6;
        padding-top: 12px;
    }

    .vote-bar {
        display: flex;
        align-items: center;
        gap: 20px;
        margin-top: 12px;
    }

    .vote-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: #f9fafb; /* light background */
        border: none;
        outline: none;
        cursor: pointer;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.06);
        transition: all 0.2s ease;
        position: relative;
    }

        .vote-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }

        .vote-btn svg {
            width: 22px;
            height: 22px;
            fill: #9ca3af; /* gray */
            transition: all 0.2s ease;
        }

        /* Active like */
        .vote-btn.active-like {
            background: linear-gradient(90deg, var(--accent-blue), var(--accent-orange));
        }

            .vote-btn.active-like svg {
                fill: #fff;
                transform: scale(1.1);
            }

        /* Active dislike */
        .vote-btn.active-dislike {
            background: linear-gradient(90deg, #a0aec0, #cbd5e1);
        }

            .vote-btn.active-dislike svg {
                fill: #111827;
                transform: scale(1.1);
            }

    /* Counter text */
    .count {
        font-size: 14px;
        margin-top: 6px;
        color: #4b5563; /* gray-700 */
        font-weight: 600;
        text-align: center;
    }

    .row-actions {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 14px;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-hollow {
        border: 1px solid var(--accent-blue);
        color: var(--accent-blue);
        background: #fff;
    }

    .btn-primary {
        background: linear-gradient(90deg, var(--accent-blue), var(--accent-orange));
        color: #fff;
        border: none;
    }

    .btn-danger {
        background: #dc2626;
        color: #fff;
        border: none;
    }

    /* Add Alert row */
    .actions-row {
        display: flex;
        justify-content: center;
        margin: 30px 0;
    }

    .btn-icon {
        margin-right: 6px;
        font-weight: 700;
    }

    /* Small screens */
    @@media (max-width: 980px) {
        .alerts-grid

    {
        grid-template-columns: 1fr;
    }

    .alerts-title {
        font-size: 36px;
    }

    .alerts-header {
        padding: 36px 0 30px;
    }

    } 
</style>


